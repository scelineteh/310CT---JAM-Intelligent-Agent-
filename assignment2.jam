GOALS:
	ACHIEVE vacuum_all_dust;

FACTS:
	FACT vacuum1_position 0 0;
	FACT vacuum2_position 7 0;

	FACT dust1 0 3;
	FACT dust2 1 2;
	FACT dust3 1 5;
	FACT dust4 2 1;
	FACT dust5 3 0;
	FACT dust6 3 3;
	FACT dust7 3 6;
	FACT dust8 4 2;
	FACT dust9 4 4;
	FACT dust10 5 5;
	FACT dust11 6 0;
	FACT exit 7 6;
	
	FACT dust1_status "Yes";
	FACT dust2_status "Yes";
	FACT dust3_status "Yes";
	FACT dust4_status "Yes";
	FACT dust5_status "Yes";
	FACT dust6_status "Yes";
	FACT dust7_status "Yes";
	FACT dust8_status "Yes";
	FACT dust9_status "Yes";
	FACT dust10_status "Yes";
	FACT dust11_status "Yes";
	FACT exit_vacuum1_status "No";
	FACT exit_vacuum2_status "No";	

PLAN:{
NAME:
	"Instruction to move Vacuum 1."
GOAL:
	ACHIEVE move_vacuum1 $dir;
BODY:
	RETRIEVE vacuum1_position $x $y;
	WHEN: TEST(== $dir "right"){
		UPDATE (vacuum1_position) (vacuum1_position (+ $x 1) $y);
	};
	WHEN: TEST(== $dir "left"){
		UPDATE (vacuum1_position) (vacuum1_position (- $x 1) $y);
	};
	WHEN: TEST(== $dir "up"){
		UPDATE (vacuum1_position) (vacuum1_position $x (+ $y 1));
	};
	WHEN: TEST(== $dir "down"){
		UPDATE (vacuum1_position) (vacuum1_position $x (- $y 1));
	};

	RETRIEVE vacuum1_position $x $y;
	EXECUTE println "Current position of Vacuum 1: ("$x","$y")\n";
	PERFORM track_dust;
FAILURE:
EXECUTE println "Failed to move...Please reboot.\n";
}

PLAN:{
NAME:
	"Instruction to move Vacuum 2."
GOAL:
	ACHIEVE move_vacuum2 $dir;
BODY:
	RETRIEVE vacuum2_position $x $y;
	WHEN: TEST(== $dir "right"){
		UPDATE (vacuum2_position) (vacuum2_position (+ $x 1) $y);
	};
	WHEN: TEST(== $dir "left"){
		UPDATE (vacuum2_position) (vacuum2_position (- $x 1) $y);
	};
	WHEN: TEST(== $dir "up"){
		UPDATE (vacuum2_position) (vacuum2_position $x (+ $y 1));
	};
	WHEN: TEST(== $dir "down"){
		UPDATE (vacuum2_position) (vacuum2_position $x (- $y 1));
	};

	RETRIEVE vacuum2_position $x $y;
	EXECUTE println "Current position of Vacuum 2: ("$x","$y")\n";
	PERFORM track_dust;
FAILURE:
EXECUTE println "Failed to move...Please reboot.\n";
}

PLAN: {
NAME: "Start moving vacuum 1 and 2"
GOAL:
	ACHIEVE vacuum_all_dust;
BODY:
	RETRIEVE vacuum1_position $x $y;
	RETRIEVE vacuum2_position $x1 $y1;
	
	EXECUTE println "Vacuum 1 starting at position : (" $x "," $y ")" ;
	EXECUTE println "Vacuum 2 starting at position : (" $x1 "," $y1 ")\n" ;

	WHILE: TEST (||(!(&& (== $x 7) (== $y 6)))(!(&& (== $x1 7) (== $y1 6)))) {

		WHILE: TEST (||(< $x 7)(&&(> $x1 0)(!= $y1 6))) { 

			WHEN: TEST(< $x 7){
			EXECUTE println "Vacuum 1 moving to the right -->";
			PERFORM move_vacuum1 "right";
			RETRIEVE vacuum1_position $x $y;
			};

			WHEN: TEST (&&(> $x1 0)(!= $y1 6)){
			EXECUTE println "Vacuum 2 moving to the left <--";
			PERFORM move_vacuum2 "left";
			RETRIEVE vacuum2_position $x1 $y1;
			};
		}; 

		WHILE: TEST (||(&& (> $x 0) (!= $y 6)) (< $x1 7)){

			WHEN: TEST (&& (> $x 0) (!= $y 6)){
			EXECUTE println "Vacuum 1 moving the to left <--";
			PERFORM move_vacuum1 "left";
			RETRIEVE vacuum1_position $x $y;
			};
			
			WHEN: TEST (< $x1 7){
			EXECUTE println "Vacuum 2 moving the to right -->";
			PERFORM move_vacuum2 "right";
			RETRIEVE vacuum2_position $x1 $y1;
			};

		}; 

		WHEN: TEST (&& (||(== $x 0) (== $x 7)) (< $y 6)) {
			EXECUTE println "Vacuum 1 moving up ^";
			PERFORM move_vacuum1 "up";
			RETRIEVE vacuum1_position $x $y;
		};

		WHEN: TEST (&& (||(== $x1 0) (== $x1 7)) (< $y1 6)) {
			EXECUTE println "Vacuum 2 moving up ^";
			PERFORM move_vacuum2 "up";
			RETRIEVE vacuum2_position $x1 $y1;
		};

	}; 
FAILURE:
	EXECUTE println "Failed to move...Please reboot\n";
}

PLAN:{
NAME:
	"Track dust based on the dust location."
GOAL:
	ACHIEVE track_dust;
BODY:
	RETRIEVE vacuum1_position $x $y;
	RETRIEVE vacuum2_position $x1 $y1;
	RETRIEVE dust1 $dx1 $dy1;
	RETRIEVE dust2 $dx2 $dy2;
	RETRIEVE dust3 $dx3 $dy3;
	RETRIEVE dust4 $dx4 $dy4;
	RETRIEVE dust5 $dx5 $dy5;
	RETRIEVE dust6 $dx6 $dy6;
	RETRIEVE dust7 $dx7 $dy7;
	RETRIEVE dust8 $dx8 $dy8;
	RETRIEVE dust9 $dx9 $dy9;
	RETRIEVE dust10 $dx10 $dy10;
	RETRIEVE dust11 $dx11 $dy11;
	RETRIEVE exit $ex1 $ey1;

	RETRIEVE dust1_status $d1;
	RETRIEVE dust2_status $d2;
	RETRIEVE dust3_status $d3;
	RETRIEVE dust4_status $d4;
	RETRIEVE dust5_status $d5;
	RETRIEVE dust6_status $d6;
	RETRIEVE dust7_status $d7;
	RETRIEVE dust8_status $d8;
	RETRIEVE dust9_status $d9;
	RETRIEVE dust10_status $d10;
	RETRIEVE dust11_status $d11;
	RETRIEVE exit_vacuum1_status $e1;
	RETRIEVE exit_vacuum2_status $e2;
	
	WHEN: TEST (|| (&&(==$x $dx1) (== $y $dy1)) (&&(==$x1 $dx1) (== $y1 $dy1))){
		WHEN: TEST(&&(&&(==$x $dx1) (== $y $dy1))(== $d1 "Yes")){
			EXECUTE println "Dust collected by Vacuum 1 at position : (" $x "," $y ")\n";
			UPDATE (dust1_status) (dust1_status "No");
		};
		WHEN: TEST(&&(&&(==$x1 $dx1) (== $y1 $dy1))(== $d1 "Yes")){
			EXECUTE println "Dust collected by Vacuum 2 at position : (" $x1 "," $y1 ")\n";
			UPDATE (dust1_status) (dust1_status "No");
		};
	};

	WHEN: TEST (||(&&(== $x $dx2) (== $y $dy2)) (&&(== $x1 $dx2) (== $y1 $dy2))){
		WHEN: TEST(&&(&&(== $x $dx2) (== $y $dy2))(== $d2 "Yes")){
			EXECUTE println "Dust collected by Vacuum 1 at position : (" $x "," $y ")\n";
			UPDATE (dust2_status) (dust2_status "No");
		};
		WHEN: TEST(&&(&&(== $x1 $dx2) (== $y1 $dy2))(== $d2 "Yes")){
			EXECUTE println "Dust collected by Vacuum 2 at position : (" $x1 "," $y1 ")\n";
			UPDATE (dust2_status) (dust2_status "No");
		};
	};

	WHEN: TEST (||(&&(== $x $dx3) (== $y $dy3)) (&&(== $x1 $dx3) (== $y1 $dy3))){
		WHEN: TEST(&&(&&(== $x $dx3) (== $y $dy3))(== $d3 "Yes")){
			EXECUTE println "Dust collected by Vacuum 1 at position : (" $x "," $y ")\n";
			UPDATE (dust3_status) (dust3_status "No");
		};
		WHEN: TEST(&&(&&(== $x1 $dx3) (== $y1 $dy3))(== $d3 "Yes")){
			EXECUTE println "Dust collected by Vacuum 2 at position : (" $x1 "," $y1 ")\n";
			UPDATE (dust3_status) (dust3_status "No");
		};
	};

	WHEN: TEST (||(&&(== $x $dx4) (== $y $dy4)) (&&(== $x1 $dx4) (== $y1 $dy4))){
		WHEN: TEST(&&(&&(== $x $dx4) (== $y $dy4))(== $d4 "Yes")){
			EXECUTE println "Dust collected by Vacuum 1 at position : (" $x "," $y ")\n";
			UPDATE (dust4_status) (dust4_status "No");
		};
		WHEN: TEST(&&(&&(== $x1 $dx4) (== $y1 $dy4))(== $d4 "Yes")){
			EXECUTE println "Dust collected by Vacuum 2 at position : (" $x1 "," $y1 ")\n";
			UPDATE (dust4_status) (dust4_status "No");
		};
	};

	WHEN: TEST (||(&&(== $x $dx5) (== $y $dy5)) (&&(== $x1 $dx5) (== $y1 $dy5))){
		WHEN: TEST(&&(&&(== $x $dx5) (== $y $dy5))(== $d5 "Yes")){
			EXECUTE println "Dust collected by Vacuum 1 at position : (" $x "," $y ")\n";
			UPDATE (dust5_status) (dust5_status "No");
		};
		WHEN: TEST(&&(&&(== $x1 $dx5) (== $y1 $dy5))(== $d5 "Yes")){
			EXECUTE println "Dust collected by Vacuum 2 at position : (" $x1 "," $y1 ")\n";
			UPDATE (dust5_status) (dust5_status "No");
		};
	};

	WHEN: TEST (||(&&(== $x $dx6) (== $y $dy6)) (&&(== $x1 $dx6) (== $y1 $dy6))){
		WHEN: TEST(&&(&&(== $x $dx6) (== $y $dy6))(== $d6 "Yes")){
			EXECUTE println "Dust collected by Vacuum 1 at position : (" $x "," $y ")\n";
			UPDATE (dust6_status) (dust6_status "No");
		};
		WHEN: TEST(&&(&&(== $x1 $dx6) (== $y1 $dy6))(== $d6 "Yes")){
			EXECUTE println "Dust collected by Vacuum 2 at position : (" $x1 "," $y1 ")\n";
			UPDATE (dust6_status) (dust6_status "No");
		};
	};

	WHEN: TEST (||(&&(== $x $dx7) (== $y $dy7)) (&&(== $x1 $dx7) (== $y1 $dy7))){
		WHEN: TEST(&&(&&(== $x $dx7) (== $y $dy7))(== $d7 "Yes")){
			EXECUTE println "Dust collected by Vacuum 1 at position : (" $x "," $y ")\n";
			UPDATE (dust7_status) (dust7_status "No");
		};
		WHEN: TEST(&&(&&(== $x1 $dx7) (== $y1 $dy7))(== $d7 "Yes")){
			EXECUTE println "Dust collected by Vacuum 2 at position : (" $x1 "," $y1 ")\n";
			UPDATE (dust7_status) (dust7_status "No");
		};
	};

	WHEN: TEST (||(&&(== $x1 $dx8) (== $y1 $dy8)) (&&(== $x1 $dx8) (== $y1 $dy8))){
		WHEN: TEST(&&(&&(== $x $dx8) (== $y $dy8))(== $d8 "Yes")){
			EXECUTE println "Dust collected by Vacuum 1 at position : (" $x "," $y ")\n";
			UPDATE (dust8_status) (dust8_status "No");
		};
		WHEN: TEST(&&(&&(== $x1 $dx8) (== $y1 $dy8))(== $d8 "Yes")){
			EXECUTE println "Dust collected by Vacuum 2 at position : (" $x1 "," $y1 ")\n";
			UPDATE (dust8_status) (dust8_status "No");
		};
	};
	
	WHEN: TEST (||(&&(== $x $dx9) (== $y $dy9)) (&&(== $x1 $dx9) (== $y1 $dy9))){
		WHEN: TEST(&&(&&(== $x $dx9) (== $y $dy9))(== $d9 "Yes")){
			EXECUTE println "Dust collected by Vacuum 1 at position : (" $x "," $y ")\n";
			UPDATE (dust9_status) (dust9_status "No");
		};
		WHEN: TEST(&&(&&(== $x1 $dx9) (== $y1 $dy9))(== $d9 "Yes")){
			EXECUTE println "Dust collected by Vacuum 2 at position : (" $x1 "," $y1 ")\n";
			UPDATE (dust9_status) (dust9_status "No");
		};
	};

	WHEN: TEST (||(&&(== $x $dx10) (== $y $dy10)) (&&(== $x1 $dx10) (== $y1 $dy10))){
		WHEN: TEST(&&(&&(== $x $dx10) (== $y $dy10))(== $d10 "Yes")){
			EXECUTE println "Dust collected by Vacuum 1 at position : (" $x "," $y ")\n";
			UPDATE (dust10_status) (dust10_status "No");
		};
		WHEN: TEST(&&(&&(== $x1 $dx10) (== $y1 $dy10))(== $d10 "Yes")){
			EXECUTE println "Dust collected by Vacuum 2 at position : (" $x1 "," $y1 ")\n";
			UPDATE (dust10_status) (dust10_status "No");
		};
	};

	WHEN: TEST (||(&&(== $x $dx11) (== $y $dy11)) (&&(== $x1 $dx11) (== $y1 $dy11))){
		WHEN: TEST(&&(&&(== $x $dx11) (== $y $dy11))(== $d11 "Yes")){
			EXECUTE println "Dust collected by Vacuum 1 at position : (" $x "," $y ")\n";
			UPDATE (dust11_status) (dust11_status "No");
		};
		WHEN: TEST(&&(&&(== $x1 $dx11) (== $y1 $dy11))(== $d11 "Yes")){
			EXECUTE println "Dust collected by Vacuum 2 at position : (" $x1 "," $y1 ")\n";
			UPDATE (dust11_status) (dust11_status "No");
		};
	};

	WHEN: TEST(&&(&&(== $x $ex1) (== $y $ey1)) (== $e1 "No")){
		EXECUTE println "Vacuum 1 exiting...";
		UPDATE (exit_vacuum1_status) (exit_vacuum1_status "Yes");		
	};
	WHEN: TEST (&&(&&(== $x1 $ex1) (== $y1 $ey1))(== $e2 "No")){
		EXECUTE println "Vacuum 2 exiting...";
		UPDATE (exit_vacuum2_status) (exit_vacuum2_status "Yes");
	};
FAILURE:
EXECUTE print "Dust is not available at the position.";
}


